# Dictionaries
# What is a dictionary?

Dictionaries are another data structure in Python. Theyâ€™re similar to a list in that they can be used to organize data into collections.

"""
The "toc" dictionary represents the table of contents for a book. Fill in the blanks to do the following: 1) Add an entry for Epilogue on page 39. 2) Change the page number for Chapter 3 to 24. 3) Display the new dictionary contents. 4) Display True if there is Chapter 5, False if there isn't.
"""
toc = {"Introduction":1, "Chapter 1":4, "Chapter 2":11, "Chapter 3":25, "Chapter 4":30}
toc["Epilogue"] = 39 # Epilogue starts on page 39
toc["Chapter 3"] = 24 # Chapter 3 now starts on page 24
print(toc) # What are the current contents?
print("Chapter 5" in toc) # Is there a Chapter 5?

# Iterating over the Contents of a Dictionary
You can iterate over dictionaries using a for loop, just like with strings, lists, and tuples.
This will iterate over the sequence of keys in the dictionary.
"""
Complete the code to iterate through the keys and values of the cool_beasts dictionary. Remember that the items method returns a tuple of key, value for each element in the dictionary.
"""
cool_beasts = {"octopuses":"tentacles", "dolphins":"fins", "rhinos":"horns"}
for beast, feature in cool_beasts.items():
    print("{} have {}".format(beast, feature))

# Dictionaries vs. Lists
"""
In Python, a dictionary can only hold a single value for a given key. To workaround this, our single value can be a list containing multiple values.
Here we have a dictionary called "wardrobe" with items of clothing and their colors.
Fill in the blanks to print a line for each item of clothing with each color, for example: "red shirt", "blue shirt", and so on.
"""
wardrobe = {"shirt":["red","blue","white"], "jeans":["blue","black"]}
for cloth in wardrobe:
    for color in wardrobe[cloth]:
        print("{} {}".format(color, cloth))